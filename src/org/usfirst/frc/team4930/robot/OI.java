//Hanna
// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team4930.robot;

import org.usfirst.frc.team4930.robot.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick0;								   //defines joystick0 as a joystick
    public Joystick joystick1;								   //defines joystick1 as a joystics
    public JoystickButton intakeInButton;   			       //defines intakeInButton as a joystick button 
    public JoystickButton intakeOutButton;				       //defines intakeOutButton as a joystick button
    public JoystickButton elevatorUpButton;                    //defines elevatorUpButton as a joystick button
    public JoystickButton elevatorDownButton;     		       //defines elevatorDownButton as a joystick button
    public Joystick joystick2;								   //defines joystick2 as a joystick

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(2);
        
        elevatorDownButton = new JoystickButton(joystick2, 6); //sets elevatorDownButton to button 6 on joystick 2
        elevatorDownButton.whileHeld(new ElevatorDown());      //the elevator goes down while the button is held
        elevatorUpButton = new JoystickButton(joystick2, 3);   //sets elevatorUpButton to button 3 on joystick 2
        elevatorUpButton.whileHeld(new ElevatorUp());		   //the elevator goes up while the button is held
        intakeOutButton = new JoystickButton(joystick2, 5);    //sets intakeOutButton to button 5 on joystick 2
        intakeOutButton.whileHeld(new IntakeOut());			   //the intake goes in while the button is held
        intakeInButton = new JoystickButton(joystick2, 4);	   //sets intakeInButton to button 4 on joystick 2
        intakeInButton.whileHeld(new IntakeIn());			   //the intake goes in while the button is held
        joystick1 = new Joystick(1);						   //defines joystick1 as a new joystick
        
        joystick0 = new Joystick(0);						   //defines joystick0 as a new joystick
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous", new Autonomous()); //puts a button on the dash for Autonomous

        SmartDashboard.putData("IntakeIn", new IntakeIn());     //puts a button on the dash for Intakein

        SmartDashboard.putData("IntakeOut", new IntakeOut());   //puts a button on the dash for IntakeOut

        SmartDashboard.putData("ElevatorUp", new ElevatorUp()); //puts a button on the dash for ElevatorUp

        SmartDashboard.putData("ElevatorDown", new ElevatorDown()); //puts a button on the dash for ElevatorDown


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick0() {                            //gets Joystick0 into this class
        return joystick0;
    }

    public Joystick getJoystick1() {						    //gets Joystick1 into this class
        return joystick1;
    }

    public Joystick getJoystick2() {							//gets Joystick2 into this class
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}